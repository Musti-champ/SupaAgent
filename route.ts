import { type NextRequest, NextResponse } from "next/server"
import { MODEL_CONFIGS } from "@/config/api-keys"

export async function POST(request: NextRequest) {
  try {
    const { message, model, history, files } = await request.json()

    let response = ""
    let metadata: any = {}

    if (files && files.length > 0) {
      const fileTypes = files.map((f: any) => f.type).join(", ")
      const fileNames = files.map((f: any) => f.name).join(", ")

      if (files.some((f: any) => f.type.startsWith("image/"))) {
        response = `üñºÔ∏è Analyzing uploaded images...\n\nI can see you've uploaded: ${fileNames}\n\nI'm processing these images to:\n‚Ä¢ Extract design patterns and layouts\n‚Ä¢ Generate corresponding code\n‚Ä¢ Create responsive components\n‚Ä¢ Optimize for web performance\n\nThe generated code will be available in your IDE workspace.`
        metadata = { openIDE: true, type: "image-analysis", files }
      } else if (files.some((f: any) => f.name.endsWith(".zip"))) {
        response = `üì¶ Processing uploaded ZIP file...\n\nI'm extracting and analyzing: ${fileNames}\n\nProcessing steps:\n‚Ä¢ Extract ZIP contents\n‚Ä¢ Analyze project structure\n‚Ä¢ Set up development environment\n‚Ä¢ Import into IDE workspace\n\nYour project will be ready for editing shortly.`
        metadata = { openIDE: true, type: "zip-extraction", files }
      } else if (files.some((f: any) => f.name.includes("figma") || f.type.includes("figma"))) {
        response = `üé® Processing Figma design...\n\nI'm converting your Figma design to code:\n‚Ä¢ Extract design tokens and components\n‚Ä¢ Generate React/HTML components\n‚Ä¢ Apply responsive design patterns\n‚Ä¢ Create production-ready code\n\nThe converted design will open in your IDE workspace.`
        metadata = { openIDE: true, type: "figma-conversion", files }
      } else {
        response = `üìÅ Processing uploaded files...\n\nI've received: ${fileNames}\n\nI'm analyzing the files to:\n‚Ä¢ Understand the project structure\n‚Ä¢ Generate missing components\n‚Ä¢ Optimize and enhance the code\n‚Ä¢ Set up the development environment\n\nThe processed project will be available in your IDE workspace.`
        metadata = { openIDE: true, type: "file-analysis", files }
      }
    } else if (message.toLowerCase().includes("clone") && (message.includes("http") || message.includes("github"))) {
      if (message.includes("github.com")) {
        response = `üîÑ Cloning GitHub repository...\n\nI'm analyzing the repository structure and preparing to:\n‚Ä¢ Clone the repository locally\n‚Ä¢ Analyze the codebase architecture\n‚Ä¢ Set up the development environment\n‚Ä¢ Open the project in VSCode.dev\n\nThe repository will be available in your IDE workspace shortly.`
        metadata = { openIDE: true, type: "github", url: extractUrl(message) }
      } else {
        response = `üåê Cloning website...\n\nI'm analyzing the website and preparing to:\n‚Ä¢ Scrape the website structure and content\n‚Ä¢ Generate clean, modern code\n‚Ä¢ Set up responsive design\n‚Ä¢ Create optimized assets\n‚Ä¢ Open the project in VSCode.dev\n\nThe cloned website will be available in your IDE workspace shortly.`
        metadata = { openIDE: true, type: "website", url: extractUrl(message) }
      }
    } else if (message.toLowerCase().includes("build") && message.toLowerCase().includes("app like")) {
      const appName = extractAppName(message)
      response = `üöÄ Building an app like ${appName}...\n\nI'm creating a comprehensive application with:\n‚Ä¢ Modern UI/UX design\n‚Ä¢ Full authentication system\n‚Ä¢ Database integration\n‚Ä¢ API endpoints\n‚Ä¢ Responsive design\n‚Ä¢ Production-ready deployment\n\nThe project structure will be set up in your IDE workspace.`
      metadata = { openIDE: true, type: "build", appName }
    } else if (message.toLowerCase().includes("debug") || message.toLowerCase().includes("fix")) {
      response = `üîß Analyzing code for debugging...\n\nI'm examining the codebase to:\n‚Ä¢ Identify potential issues\n‚Ä¢ Suggest optimizations\n‚Ä¢ Fix bugs and errors\n‚Ä¢ Improve performance\n‚Ä¢ Update dependencies\n\nI'll provide detailed solutions and open the fixed code in your IDE.`
      metadata = { openIDE: true, type: "debug" }
    } else {
      response = `üí° I can help you with that!\n\nAs your AI Fullstack Developer, I can:\n‚Ä¢ Clone any website or GitHub repository\n‚Ä¢ Build applications from scratch\n‚Ä¢ Debug and optimize existing code\n‚Ä¢ Create modern, responsive interfaces\n‚Ä¢ Set up databases and APIs\n‚Ä¢ Deploy to production\n\nPlease provide more specific details about what you'd like me to help you with.`
    }

    const selectedModel = MODEL_CONFIGS[model as keyof typeof MODEL_CONFIGS] || MODEL_CONFIGS.venice

    return NextResponse.json({
      response,
      metadata: {
        ...metadata,
        modelUsed: selectedModel.name,
        provider: selectedModel.provider,
      },
      model: model || "venice",
    })
  } catch (error) {
    console.error("Error processing request:", error)
    return NextResponse.json({ error: "Failed to process request" }, { status: 500 })
  }
}

function extractUrl(message: string): string {
  const urlRegex = /(https?:\/\/[^\s]+)/g
  const match = message.match(urlRegex)
  return match ? match[0] : ""
}

function extractAppName(message: string): string {
  const match = message.match(/app like (\w+)/i)
  return match ? match[1] : "the requested application"
}
